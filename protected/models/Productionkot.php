<?php

/**
 * This is the model class for table "production_kot".
 *
 * The followings are the available columns in table 'production_kot':
 * @property integer $id
 * @property integer $generated_by
 * @property string $kot_no
 * @property string $kot_date
 * @property string $status
 * @property string $delivery_status
 * @property string $deliver_by
 * @property integer $is_redraw
 * @property integer $is_added_to_shelf
 *
 * The followings are the available model relations:
 * @property Users $generatedBy
 * @property ProductionKotComments[] $productionKotComments
 * @property ProductionKotItems[] $productionKotItems
 */
class Productionkot extends CActiveRecord {

    /**
     * Returns the static model of the specified AR class.
     * @param string $className active record class name.
     * @return Productionkot the static model class
     */
    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    /**
     * @return string the associated database table name
     */
    public function tableName() {
        return 'production_kot';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules() {
        // NOTE: you should only define rules for those attributes that
        // will receive user inputs.
        return array(
            array('generated_by, is_redraw, is_added_to_shelf', 'numerical', 'integerOnly' => true),
            array('kot_no', 'length', 'max' => 20),
            array('status, delivery_status', 'length', 'max' => 7),
            array('kot_date, deliver_by', 'safe'),
            // The following rule is used by search().
            // Please remove those attributes that should not be searched.
            array('id, generated_by, kot_no, kot_date, status, delivery_status, deliver_by, is_redraw, is_added_to_shelf', 'safe', 'on' => 'search'),
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations() {
        // NOTE: you may need to adjust the relation name and the related
        // class name for the relations automatically generated below.
        return array(
            'generatedby' => array(self::BELONGS_TO, 'Users', 'generated_by'),
            'productionkotcomments' => array(self::HAS_MANY, 'Productionkotcomments', 'production_kot_id'),
            'productionkotitems' => array(self::HAS_MANY, 'Productionkotitems', 'production_kot_id'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
            'id' => 'ID',
            'generated_by' => 'Generated By',
            'kot_no' => 'Kot No',
            'kot_date' => 'Kot Date',
            'status' => 'Status',
            'delivery_status' => 'Delivery Type',
            'deliver_by' => 'Delivery Date',
            'is_redraw' => 'Is Redraw',
            'is_added_to_shelf' => 'Is Added To Shelf',
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.
     */
    public function search() {
        // Warning: Please modify the following code to remove attributes that
        // should not be searched.

        $criteria = new CDbCriteria;

        $criteria->order = 'id desc';
        $criteria->compare('id', $this->id);
        $criteria->compare('generated_by', $this->generated_by);
        $criteria->compare('kot_no', $this->kot_no, true);
        $criteria->compare('kot_date', $this->kot_date, true);
        $criteria->compare('status', $this->status, true);
        $criteria->compare('delivery_status', $this->delivery_status, true);
        $criteria->compare('deliver_by', $this->deliver_by, true);
//        $criteria->compare('is_redraw', $this->is_redraw);
//        $criteria->compare('is_added_to_shelf', $this->is_added_to_shelf);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public static function Action($data) {
        $comment = Productionkotcomments::model()->findBySql("select * from production_kot_comments where production_kot_id=$data->id order by id desc limit 1");
        $items = Productionkotitems::model()->findAllByAttributes(array('production_kot_id' => $data->id));
        if (!empty($items)) {
            if (!empty($comment)) {
                if ($comment->to_id == Yii::app()->user->id) {
                    $color = "info";
                } else {
                    $color = "success";
                }
            } else {
                $color = "success";
            }
            if($data->status=='reject'){
            $val = "Change";                
            }else{
            $val = "View";
            }
        } else {
            $color = "warning";
            $val = "Add";
        }
        ?>
        <a class="btn btn-<?php echo $color; ?>" href="<?php echo Yii::app()->createUrl('productionkot/view', array('id' => $data->id)); ?>"><b><?php echo $val; ?> Details</b></a>    
        <?php if ($data->status != 'pending' && $data->status != 'done') { ?>
            <a class="btn btn-primary" href="<?php echo Yii::app()->createUrl('productionkot/resendpkot', array('id' => $data->id)); ?>"><i class="glyphicon glyphicon-refresh"></i></a>    
            <?php
        }
        ?>
        <a class="btn btn-primary" href="<?php echo Yii::app()->createUrl('productionkot/printpkot', array('id' => $data->id)); ?>" target="_blank"><i class="glyphicon glyphicon-print"></i></a>    
        <?php
    }

}
